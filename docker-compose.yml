version: '3.3'  # Compatível com versões estáveis do Docker Compose

services:
  # Banco de Dados PostgreSQL
  db:
    image: postgres:13
    container_name: my_postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_db
    ports:
      - "5432:5432"
    volumes:
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "orders_db"]
      interval: 10s
      retries: 5
      timeout: 5s

  # Zookeeper para gerenciar Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mynetwork

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_NAMES: INSIDE,OUTSIDE
      KAFKA_LISTENER_NAME_INSIDE: PLAINTEXT://kafka:9092  # Para comunicação interna com Docker
      KAFKA_LISTENER_NAME_OUTSIDE: PLAINTEXT://localhost:9092  # Para comunicação externa
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      retries: 5
      timeout: 5s
    volumes:
      - ./docker/init.sh:/etc/kafka/init.sh
    #entrypoint: ["/bin/bash", "/etc/kafka/init.sh"]
    networks:
      - mynetwork

  # Serviço para criar automaticamente o tópico Kafka
  kafka-setup:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-setup
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      kafka-topics --create --topic new-orders --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 &&
      echo 'Tópico new-orders criado com sucesso!'
      "
    networks:
      - mynetwork

  # Interface gráfica para monitorar Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8081"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - mynetwork

  # Aplicação Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_spring_app
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/orders_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - db
      - kafka
    ports:
      - "8080:8080"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  pgdata:

networks:
  mynetwork:
    driver: bridge
